# Weibull qq plot for right censored data

qq.weibreg <- function(data,weib.fit,xlab = "standard extreme value \n 
quantiles", ylab = "ordered log data", pch = NULL, lty = NULL, col= NULL) 
{
## Purpose: qqplot for Weibull regression with one covariate which has a finite number 
##          of distinct values which can be coverted into levels. It draws lines with same 
##          slope sigma, but different intercepts, whose values are the MLE's
##-------------------------------------------------------------------
## Arguments: ##  data  A Surv object, or a list of such objects
##            ##  weib.fit is a survReg object with dist="weibull"    
##-------------------------------------------------------------------
## Author: Mara Tableman  Date: 18 December 2002, 20:30
    on.exit(browser())
    t.c <- class(data)
    if((!is.null(t.c)) && t.c == "Surv")
        data <- list(data)
    t.k <- length(data)
    if(is.null(pch))
        pch <- 1:t.k
    if(is.null(lty))
        lty <- 1:t.k
    if(is.null(col))
        col <- 1 + 1:t.k
    t.sf <- lapply(data, function(s)
    {
        t.s <- summary(survfit(s, type = "kaplan-meier"))
        t.ss <- t.s$surv
        t.s$surv <- (t.ss + c(1, t.ss[ - length(t.ss)]))/2
        t.s
    }
    )
    t.rgs <- range(sapply(t.sf, function(s)
    range(s$surv)))
    t.rgt <- range(sapply(t.sf, function(s)
    range(s$time)))
    plot(log(qweibull(1 - t.rgs, 1)), log(t.rgt), type = "n",ylim=c(5.5, max(log(t.rgt))),
    xlab = xlab, ylab = ylab)
    for(t.g in 1:t.k) {
      points(log(qweibull(1 - t.sf[[t.g]]$surv, 1)), log(t.sf[[t.g]]$time), pch=pch[t.g], col=1)
      mutilde_as.numeric(levels(factor(weib.fit$linear.predictors))) 
      scale_rep(weib.fit$scale,length(mutilde))
      abline(mutilde[t.g],scale[t.g],lty=lty[t.g],col=1)   
       }
      on.exit()
    "qq.weibreg:done"
}

xln_levels(factor(motorette$x))
ts.1_Surv(motorette$time[as.factor(motorette$x)==xln[1]],motorette$status[as.factor(motorette$x)==xln[1]]) 
ts.2_Surv(motorette$time[as.factor(motorette$x)==xln[2]],motorette$status[as.factor(motorette$x)==xln[2]])
ts.3_Surv(motorette$time[as.factor(motorette$x)==xln[3]],motorette$status[as.factor(motorette$x)==xln[3]])
weib.fit_survReg(Surv(time,status)~x, data=motorette,dist="weib")
qq.weibreg(list(ts.1,ts.2,ts.3),weib.fit)
