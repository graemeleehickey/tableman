 qq.weibull<-
function(data,scale=0, xlab = "standard extreme value \n quantiles", ylab = 
	"ordered log data", pch = NULL, lty = NULL, col = NULL)
{
## Purpose: qqplot for Weibull distribution for one or several samples 
## It fits each sample with own intercept and slope (location and scale).
##-------------------------------------------------------------------
## Arguments: ##  data  A Surv object, or a list of such objects
##       options:  scale=0 is the default. This estimates the scale.
##                 scale=1 fits the exponential model. 
##-------------------------------------------------------------------
## Author: Werner Stahel, Date: 15 Aug 2002, 18:41
	on.exit(browser())
	t.c <- class(data)
	if((!is.null(t.c)) && t.c == "Surv")
		data <- list(data)
	t.k <- length(data)
	if(is.null(pch))
		pch <- 1:t.k
	if(is.null(lty))
		lty <- 1:t.k
	if(is.null(col))
		col <- 1 + 1:t.k
	t.sf <- lapply(data, function(s)
	{
		t.s <- summary(survfit(s, type = "kaplan-meier"))
		t.ss <- t.s$surv
		t.s$surv <- (t.ss + c(1, t.ss[ - length(t.ss)]))/2
		t.s
	}
	)
	t.rgs <- range(sapply(t.sf, function(s)
	range(s$surv)))
	t.rgt <- range(sapply(t.sf, function(s)
	range(s$time)))
	plot(log(qweibull(1 - t.rgs, 1)), log(t.rgt), type = "n", xlab
		 = xlab, ylab = ylab)
	for(t.g in 1:t.k) {
		points(log(qweibull(1 - t.sf[[t.g]]$surv, 1)), 
		log(t.sf[[t.g]]$time), pch = pch[t.g], col = 1)
		t.r <- survReg(data[[t.g]] ~ 1, dist = "weibull",scale=scale)
		abline(t.r$coef, t.r$scale, lty = lty[t.g], col = 1)
	}
	on.exit()
	"qq.weibull:done"
}

xln_levels(factor(motorette$x))
ts.1_Surv(motorette$time[as.factor(motorette$x)==xln[1]],motorette$status[as.factor(motorette$x)==xln[1]]) 
ts.2_Surv(motorette$time[as.factor(motorette$x)==xln[2]],motorette$status[as.factor(motorette$x)==xln[2]])
ts.3_Surv(motorette$time[as.factor(motorette$x)==xln[3]],motorette$status[as.factor(motorette$x)==xln[3]])
qq.weibull(list(ts.1,ts.2,ts.3))

